out <- fromJSON(url)
url <-"https://nominatim.openstreetmap.org/search?q=270+Bay+State+Rd+Boston+MA&format=json"
out <- fromJSON(url)
View(out)
View(out)
install.packages('tidycensus')
library(tidycensus)
census_api_key("7345c79e7ae2c2bb2c6f7f491f16fe2298fa31bc", install = TRUE)
readRenviron("~/.Renviron")
getwd()
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
getwd()
?read_excel
??read_excel
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
df <- read_excel("C:/Users/edog9/Dropbox/expulsion_towns/spreadsheet.xlsx")
View(df)
?read_excel
df <- read_excel("C:/Users/edog9/Dropbox/expulsion_towns/spreadsheet.xlsx", skip = 1)
View(df)
test <- df$link[355]
page <- read_html(test)
View(page)
titles <- page %>%
html_nodes(".article-title") %>%  # Use the appropriate CSS selector for the titles
html_text()
??xml_child
install.packages('xml2')
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
df <- read_excel("C:/Users/edog9/Dropbox/expulsion_towns/spreadsheet.xlsx", skip = 1)
test <- df$link[355]
page <- read_html(test)
titles <- page %>%
html_nodes(".article-title") %>%  # Use the appropriate CSS selector for the titles
html_text()
print()
print(titles)
page
xml_child(page, 1)
library(xml2)
xml_child(page, 1)
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl',
'xml2')
x <- page %>%
xml_child(1)
y <- page %>%
xml_child(2)
z <- page %>%
xml_child(3)
View(x)
xml_attrs(xml_child(x, 6))[["content"]]
xml_attrs(xml_child(x, 16))[["content"]]
View(y)
signin_url <- "https://www.newspapers.com/signin/"
username <- "ptesta@tulane.edu"
password <- "Sund0wn!123"
login <- list(username = "ptesta@tulane.edu",
password = "Sund0wn!123")
session <- html_session(signin_url)
session <- sesion(signin_url)
session <- session(signin_url)
login_response <- session %>%
submit_form(
form = html_form(session)[[1]], # Use the first form on the page
submit = "Login",
login_payload
)
login_response <- session %>%
session_submit(
form = html_form(session)[[1]], # Use the first form on the page
submit = "Login",
login_payload
)
View(session)
html_form(session)[[1]]
session <- session(signin_url)
session <- session(signin_url, user_agent_string = user_agent_string)
user_agent_string <- "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
session <- session(signin_url, user_agent_string = user_agent_string)
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl',
'xml2',
"RSelenium")
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl',
'xml2',
"RSelenium",
'wdman')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
rD <- rsDriver(browser = "chrome", chromever = "latest")
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl',
'xml2',
"RSelenium",
'wdman')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
rD <- rsDriver(browser = "chrome", chromever = "latest")
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl',
'xml2',
"RSelenium",
'wdman')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
rD <- rsDriver(browser = "chrome", chromever = "latest")
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'sf',
'haven',
'tigris',
'stringr',
'readxl',
'terra')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
# Get paths
paths <- read.csv("../../paths.csv")
getwd()
setwd("/Users/edog9/Documents/GitHub/municipality_proliferation/code/cleaning")
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'sf',
'haven',
'tigris',
'stringr',
'readxl',
'terra')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
# Get paths
paths <- read.csv("../../paths.csv")
CLEANDATA <- paths[paths$global == "CLEANDATA",2]
RAWDATA <- paths[paths$global == "RAWDATA",2]
INTDATA <- paths[paths$global == "INTDATA",2]
XWALKS <- paths[paths$global == "XWALKS",2]
munis <- st_read(paste0(CLEANDATA,"/other/municipal_shapefile/municipal_shapefile_v2.shp"))
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233.shp"))
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233.shp"))
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233.shp"))
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2223.shp"))
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL_23_SY2223.shp"))
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL_23_SY2223.shp"))
st_crs(districts)
st_crs(munis)
plot(districts$geometry[1:100])
View(districts)
View(munis)
districts <- districts %>%
replace(STATEFP = as.numeric(STATEFP))
districts <- districts %>%
replace(STATEFP = as.numeric(STATEFP))
districts <- districts %>%
mutate(STATEFP = as.numeric(STATEFP))
districts <- districts %>%
mutate(STATEFP = as.numeric(STATEFP)) %>%
filter(STATEFP %in% unique(munis$STATEFP))
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL_23_SY2223.shp"))
munis <- munis %>%
filter(sm_130_ == 1)
districts <- districts %>%
mutate(STATEFP = as.numeric(STATEFP)) %>%
filter(STATEFP %in% unique(munis$STATEFP))
length(unique(munis$STATEFP))
length(unique(districts$GEOID))
View(munis)
munis <- munis %>%
filter(sm_130_ == 1) %>%
mutate(land_area = st_area())
munis <- munis %>%
filter(sm_130_ == 1) %>%
mutate(land_area = st_area(geometry))
districts <- districts %>%
mutate(STATEFP = as.numeric(STATEFP)) %>%
filter(STATEFP %in% unique(munis$STATEFP)) %>%
mutate(land_area = st_area(geometry))
districts <- districts %>%
mutate(STATEFP = as.numeric(STATEFP)) %>%
filter(STATEFP %in% unique(munis$STATEFP)) %>%
st_make_valid() %>%
mutate(land_area = st_area(geometry))
x <- st_intersection(munis[1,],districts[1,])
x
is.na(x)
nrow(x)
x <- st_intersection(munis[1,],munis[1,])
st_area(int)
st_area(x)
munis <- st_read(paste0(CLEANDATA,"/other/municipal_shapefile/municipal_shapefile_v2.shp"))
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL_23_SY2223.shp"))
munis <- munis %>%
filter(sm_130_ == 1) %>%
mutate(land_area = st_area(geometry))
districts <- districts %>%
mutate(STATEFP = as.numeric(STATEFP)) %>%
filter(STATEFP %in% unique(munis$STATEFP)) %>%
st_make_valid() %>%
mutate(land_area = st_area(geometry))
for(s in unique(munis$STATEFP)){
print(paste0("Starting state: ",s))
state_munis <- munis %>% filter(STATEFP == s)
state_districts <- districts %>% filter(STATEFP == s)
nr <- nrow(state_munis)
nc <- nrow(state_districts)
munigrid = data.frame(matrix(NA, nrow = nr, ncol = nc))
distgrid = data.frame(matrix(NA, nrow = nr, ncol = nc))
colnames(munigrid) <- state_districts$GEOID
rownames(munigrid) <- state_munis$GEOID
colnames(distgrid) <- state_districts$GEOID
rownames(distgrid) <- state_munis$GEOID
for(i in 1:nr){
muni <- state_munis[i,]
print(paste0("Starting i: ",i))
for(j in 1:nc){
dist <- state_districts[j,]
int <- st_intersection(muni,dist)
if(nrow(int) > 0){
int_area <- st_area(int)
munigrid[i,j] <- int_area/ state_munis$area[i]
distgrid[i,j] <- int_area/ state_districts$area[j]
}
else{
munigrid[i,j] <- 0
distgrid[i,j] <- 0
}
}
}
write.csv(munigrid,paste0(INTDATA,'/nces/muni_district_overlaps/munigrid_',s,".csv"))
write.csv(distgrid,paste0(INTDATA,'/nces/muni_district_overlaps/distgrid_',s,".csv"))
}
for(s in unique(munis$STATEFP)){
print(paste0("Starting state: ",s))
state_munis <- munis %>% filter(STATEFP == s)
state_districts <- districts %>% filter(STATEFP == s)
nr <- nrow(state_munis)
nc <- nrow(state_districts)
munigrid = data.frame(matrix(NA, nrow = nr, ncol = nc))
distgrid = data.frame(matrix(NA, nrow = nr, ncol = nc))
colnames(munigrid) <- state_districts$GEOID
rownames(munigrid) <- state_munis$GEOID
colnames(distgrid) <- state_districts$GEOID
rownames(distgrid) <- state_munis$GEOID
for(i in 1:nr){
muni <- state_munis[i,]
print(paste0("Starting i: ",i))
for(j in 1:nc){
print(paste0("Starting j: ",j))
dist <- state_districts[j,]
int <- st_intersection(muni,dist)
if(nrow(int) > 0){
int_area <- st_area(int)
munigrid[i,j] <- int_area/ state_munis$area[i]
distgrid[i,j] <- int_area/ state_districts$area[j]
}
else{
munigrid[i,j] <- 0
distgrid[i,j] <- 0
}
}
}
write.csv(munigrid,paste0(INTDATA,'/nces/muni_district_overlaps/munigrid_',s,".csv"))
write.csv(distgrid,paste0(INTDATA,'/nces/muni_district_overlaps/distgrid_',s,".csv"))
}
x <- st_intersection(state_munis[1,],state_districts[147,])
x <- st_intersection(state_munis[1,],state_districts[147,]) %>% st_area()
plot(state_munis[1,]$geometry, col = 'red')
plot(state_districts[147,]$geometry, col = 'blue')
plot(state_districts[147,]$geometry, col = 'blue')
plot(state_munis[1,]$geometry, col = 'red', add = T)
plot(x$geometry, col = 'green', add = T)
x <- st_intersection(state_munis[1,],state_districts[147,]) %>% st_make_valid() %>% st_area()
x
state_munis[1,]$land_area
int_area <- st_area(st_make_valid(int))
for(s in unique(munis$STATEFP)){
print(paste0("Starting state: ",s))
state_munis <- munis %>% filter(STATEFP == s)
state_districts <- districts %>% filter(STATEFP == s)
nr <- nrow(state_munis)
nc <- nrow(state_districts)
munigrid = data.frame(matrix(NA, nrow = nr, ncol = nc))
distgrid = data.frame(matrix(NA, nrow = nr, ncol = nc))
colnames(munigrid) <- state_districts$GEOID
rownames(munigrid) <- state_munis$GEOID
colnames(distgrid) <- state_districts$GEOID
rownames(distgrid) <- state_munis$GEOID
for(i in 1:nr){
muni <- state_munis[i,]
print(paste0("Starting i: ",i))
for(j in 1:nc){
print(paste0("Starting j: ",j))
dist <- state_districts[j,]
int <- st_intersection(muni,dist)
if(nrow(int) > 0){
int_area <- st_area(st_make_valid(int))
munigrid[i,j] <- int_area/ state_munis$land_area[i]
distgrid[i,j] <- int_area/ state_districts$land_area[j]
}
else{
munigrid[i,j] <- 0
distgrid[i,j] <- 0
}
}
}
write.csv(munigrid,paste0(INTDATA,'/nces/muni_district_overlaps/munigrid_',s,".csv"))
write.csv(distgrid,paste0(INTDATA,'/nces/muni_district_overlaps/distgrid_',s,".csv"))
}
x <- st_intersection(state_munis[1,],state_districts[169])
x <- st_intersection(state_munis[1,],state_districts[169,])
plot(state_districts[169,], col = "red")
plot(state_districts[169,]$geometry, col = "red")
plot(state_munis[1,]$geometry, col = "blue", add = T)
y <- state_districts[169,]
View(y)
View(state_districts)
View(y)
plot(state_munis[1,]$geometry, col = "blue")
plot(state_districts[169,]$geometry, col = "red", add = T)
xx <- st_intersection(state_munis[1,],state_districts[169,])
xx <- st_intersection(state_munis[1,],state_districts[169,],dimension = "polygon" )
for(s in unique(munis$STATEFP)){
print(paste0("Starting state: ",s))
state_munis <- munis %>% filter(STATEFP == s)
state_districts <- districts %>% filter(STATEFP == s)
nr <- nrow(state_munis)
nc <- nrow(state_districts)
munigrid = data.frame(matrix(NA, nrow = nr, ncol = nc))
distgrid = data.frame(matrix(NA, nrow = nr, ncol = nc))
colnames(munigrid) <- state_districts$GEOID
rownames(munigrid) <- state_munis$GEOID
colnames(distgrid) <- state_districts$GEOID
rownames(distgrid) <- state_munis$GEOID
for(i in 1:nr){
muni <- state_munis[i,]
print(paste0("Starting i: ",i))
for(j in 1:nc){
print(paste0("Starting j: ",j))
dist <- state_districts[j,]
int <- st_intersection(muni,dist,dimension = "polygon")
if(nrow(int) > 0){
int_area <- st_area(st_make_valid(int))
munigrid[i,j] <- int_area/ state_munis$land_area[i]
distgrid[i,j] <- int_area/ state_districts$land_area[j]
}
else{
munigrid[i,j] <- 0
distgrid[i,j] <- 0
}
}
}
write.csv(munigrid,paste0(INTDATA,'/nces/muni_district_overlaps/munigrid_',s,".csv"))
write.csv(distgrid,paste0(INTDATA,'/nces/muni_district_overlaps/distgrid_',s,".csv"))
}
for(s in unique(munis$STATEFP)){
print(paste0("Starting state: ",s))
state_munis <- munis %>% filter(STATEFP == s)
state_districts <- districts %>% filter(STATEFP == s)
nr <- nrow(state_munis)
nc <- nrow(state_districts)
munigrid = data.frame(matrix(NA, nrow = nr, ncol = nc))
distgrid = data.frame(matrix(NA, nrow = nr, ncol = nc))
colnames(munigrid) <- state_districts$GEOID
rownames(munigrid) <- state_munis$GEOID
colnames(distgrid) <- state_districts$GEOID
rownames(distgrid) <- state_munis$GEOID
for(i in 1:nr){
muni <- state_munis[i,]
print(paste0("Starting i: ",i))
for(j in 1:nc){
dist <- state_districts[j,]
int <- st_intersection(muni,dist,dimension = "polygon")
if(nrow(int) > 0){
int_area <- st_area(st_make_valid(int))
munigrid[i,j] <- int_area/ state_munis$land_area[i]
distgrid[i,j] <- int_area/ state_districts$land_area[j]
}
else{
munigrid[i,j] <- 0
distgrid[i,j] <- 0
}
}
}
write.csv(munigrid,paste0(INTDATA,'/nces/muni_district_overlaps/munigrid_',s,".csv"))
write.csv(distgrid,paste0(INTDATA,'/nces/muni_district_overlaps/distgrid_',s,".csv"))
}
