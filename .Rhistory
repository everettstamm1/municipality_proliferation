BU_faculty_df <- data.frame()
# Loop to extract name, position, website
for(i in 1:length(faclist)){
name <- faclist[i] %>% html_elements('h6.profile-name') %>% html_text
position <- faclist[i] %>% html_elements('p.profile-title') %>% html_text
website <- faclist[i] %>% html_elements('a.profile-link') %>% html_attr(name='href')
stopifnot(length(name)==1 & length(position)==1 & length(website)==1)
row <- cbind(name,position,website)
BU_faculty_df[i] <- row
}
# Vector
name <- faclist %>% html_element('h6.profile-name') %>% html_text
position <- faclist %>% html_element('p.profile-title') %>% html_text
website <- faclist %>% html_element('a.profile-link') %>% html_attr(name='href')
BU_faculty_df <- data.frame(name,position,website)
View(BU_faculty_df)
temp_web <- read_html(website)
website[1]
# Reading fields
for(i in 1:length(website)){
temp_web <- read_html(website[i])
field <- temp_web %>% html_elements('b') %>% html_text
# If multiple rows are extracted, take the element with "fields" in the text
#field <- field[grepl("Fields")]
BU_faculty_df$fields[i] <- field
}
# Reading fields
for(i in 1:length(website)){
temp_web <- read_html(website[i])
field <- temp_web %>% html_elements('b') %>% html_text
# If multiple rows are extracted, take the element with "fields" in the text
#field <- field[grepl("Fields")]
BU_faculty_df$fields[i] <- field
}
View(BU_faculty_df)
website[2]
# Reading fields
for(i in 1:length(website)){
temp_web <- read_html(website[i])
field <- temp_web %>% html_elements('b') %>% html_text
# If multiple rows are extracted, take the element with "fields" in the text
field <- field[grepl("Fields",field,fixed = TRUE)==TRUE]
field <- sub("Fields: ",'',field)
stopifnot(length(field)<=1)
if(length(field)==0){
field <- ""
}
BU_faculty_df$fields[i] <- field
}
install.packages('jsonlite')
library(jsonlite)
url <-"https://nominatim.openstreetmap.org/search?q=270+Bay+State+
Rd+Boston+MA&format=json"
out <- fromJSON(url)
url <-"https://nominatim.openstreetmap.org/search?q=270+Bay+State+Rd+Boston+MA&format=json"
out <- fromJSON(url)
View(out)
View(out)
install.packages('tidycensus')
library(tidycensus)
census_api_key("7345c79e7ae2c2bb2c6f7f491f16fe2298fa31bc", install = TRUE)
readRenviron("~/.Renviron")
getwd()
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
getwd()
?read_excel
??read_excel
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
df <- read_excel("C:/Users/edog9/Dropbox/expulsion_towns/spreadsheet.xlsx")
View(df)
?read_excel
df <- read_excel("C:/Users/edog9/Dropbox/expulsion_towns/spreadsheet.xlsx", skip = 1)
View(df)
test <- df$link[355]
page <- read_html(test)
View(page)
titles <- page %>%
html_nodes(".article-title") %>%  # Use the appropriate CSS selector for the titles
html_text()
??xml_child
install.packages('xml2')
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
df <- read_excel("C:/Users/edog9/Dropbox/expulsion_towns/spreadsheet.xlsx", skip = 1)
test <- df$link[355]
page <- read_html(test)
titles <- page %>%
html_nodes(".article-title") %>%  # Use the appropriate CSS selector for the titles
html_text()
print()
print(titles)
page
xml_child(page, 1)
library(xml2)
xml_child(page, 1)
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl',
'xml2')
x <- page %>%
xml_child(1)
y <- page %>%
xml_child(2)
z <- page %>%
xml_child(3)
View(x)
xml_attrs(xml_child(x, 6))[["content"]]
xml_attrs(xml_child(x, 16))[["content"]]
View(y)
signin_url <- "https://www.newspapers.com/signin/"
username <- "ptesta@tulane.edu"
password <- "Sund0wn!123"
login <- list(username = "ptesta@tulane.edu",
password = "Sund0wn!123")
session <- html_session(signin_url)
session <- sesion(signin_url)
session <- session(signin_url)
login_response <- session %>%
submit_form(
form = html_form(session)[[1]], # Use the first form on the page
submit = "Login",
login_payload
)
login_response <- session %>%
session_submit(
form = html_form(session)[[1]], # Use the first form on the page
submit = "Login",
login_payload
)
View(session)
html_form(session)[[1]]
session <- session(signin_url)
session <- session(signin_url, user_agent_string = user_agent_string)
user_agent_string <- "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
session <- session(signin_url, user_agent_string = user_agent_string)
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl',
'xml2',
"RSelenium")
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl',
'xml2',
"RSelenium",
'wdman')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
rD <- rsDriver(browser = "chrome", chromever = "latest")
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl',
'xml2',
"RSelenium",
'wdman')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
rD <- rsDriver(browser = "chrome", chromever = "latest")
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'rvest',
'httr',
'readxl',
'xml2',
"RSelenium",
'wdman')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
rD <- rsDriver(browser = "chrome", chromever = "latest")
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'sf',
'haven',
'tigris',
'stringr',
'readxl',
'terra')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
# Get paths
paths <- read.csv("../../paths.csv")
getwd()
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'sf',
'haven',
'tigris',
'stringr',
'readxl',
'terra')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
# Get paths
paths <- read.csv("paths.csv")
getwd()
cd('../..')
setwd('../..')
setwd('Documents')
setwd('github')
setwd('municipality_proliferation')
s
# Get paths
paths <- read.csv("paths.csv")
RAWDATA <- paths[paths$global == "RAWDATA",2]
INTDATA <- paths[paths$global == "INTDATA",2]
CLEANDATA <- paths[paths$global == "CLEANDATA",2]
FIGS <- paths[paths$global == "FIGS",2]
XWALKS <- paths[paths$global == "XWALKS",2]
#### Geographies ----
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL_23_SY2223.shp"))
munis <- st_read(paste0(CLEANDATA,"/other/municipal_shapefile/municipal_shapefile_v2.shp"))
crs <- st_crs(munis) # NAD 83
st_crs(districts)
st_crs(munis)
View(districts)
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL_23_SY2223.shp")) %>%
select(leaid, geometry) %>%
st_make_valid() %>%
mutate(area = st_area(geometry))
View(districts)
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL_23_SY2223.shp")) %>%
select(GEOID, geometry, ALAND) %>%
st_make_valid() %>%
mutate(area = st_area(geometry))
View(districts)
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL_23_SY2223.shp")) %>%
select(GEOID, ALAND) %>%
st_drop_geometry() %>%
rename(leaid = GEOID,
area = ALAND)
write_dta(output_districts,path=paste0(XWALKS,"/leaid_place_xwalk.dta"))
write_dta(districts,path=paste0(INTDATA,"/nces/leaid_areas.dta"))
View(districts)
dist_cz_xwalk <- st_read(paste0(XWALKS,"/leaid_cz_xwalk.dta"))
dist_cz_xwalk <- st_read(paste0(XWALKS,"/leaid_cz_xwalk.dta"))
## Load dependencies, install if not already.
packages <-
c('tidyverse',
'sf',
'haven',
'tigris',
'stringr',
'readxl',
'terra')
for (pkg in packages) {
if (require(pkg, character.only = TRUE) == FALSE) {
print(paste0("Trying to install ", pkg))
install.packages(pkg)
if (require(pkg, character.only = TRUE)) {
print(paste0(pkg, " installed and loaded"))
} else{
stop(paste0("could not install ", pkg))
}
}
}
dist_cz_xwalk <- read_dta(paste0(XWALKS,"/leaid_cz_xwalk.dta"))
View(districts)
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL_23_SY2223.shp"))
View(dist_cz_xwalk)
districts <- districts %>%
mutate(leaid = as.numeric(GEOID)) %>%
inner_join(disc_cz_xwalk, by = 'leaid')
districts <- districts %>%
mutate(leaid = as.numeric(GEOID)) %>%
inner_join(dist_cz_xwalk, by = 'leaid')
districts <- districts %>%
mutate(leaid = as.numeric(GEOID))
districts <- districts %>%
mutate(leaid = as.numeric(GEOID)) %>%
full_join(dist_cz_xwalk, by = 'leaid')
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL_23_SY2223.shp"))
dist_cz_xwalk <- read_dta(paste0(XWALKS,"/leaid_cz_xwalk.dta"))
districts <- districts %>%
mutate(leaid = as.numeric(GEOID)) %>%
full_join(dist_cz_xwalk, by = 'leaid')
table(districts$STATEFP[is.na(districts$czone)])
length(districts$STATEFP[is.na(districts$czone)])
sum(is.na(districts$czone))
length(unique(dist_cz_xwalk$czone))
cz_pooled <- read_dta(paste0(CLEANDATA,"/cz_pooled.dta"))
View(cz_pooled)
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL_23_SY2223.shp"))
dist_cz_xwalk <- read_dta(paste0(XWALKS,"/leaid_cz_xwalk.dta")) %>%
rename(cz = czone)
sample_czs <- read_dta(paste0(CLEANDATA,"/cz_pooled.dta")) %>%
select(cz)
districts <- districts %>%
mutate(leaid = as.numeric(GEOID)) %>%
left_join(dist_cz_xwalk, by = 'leaid') %>%
inner_join(sample_czs, by = 'cz')
districts <- st_read(paste0(RAWDATA,"/nces/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL23_SY2233/EDGE_SCHOOLDISTRICT_TL_23_SY2223.shp"))
dist_cz_xwalk <- read_dta(paste0(XWALKS,"/leaid_cz_xwalk.dta")) %>%
rename(cz = czone)
sample_czs <- read_dta(paste0(CLEANDATA,"/cz_pooled.dta")) %>%
select(cz)
df <- districts %>%
mutate(leaid = as.numeric(GEOID)) %>%
left_join(dist_cz_xwalk, by = 'leaid') %>%
inner_join(sample_czs, by = 'cz')
for(c in unique(df$cz)){
print(paste0("Starting cz: ",c))
cz_df <- df %>% filter(cz == c)
len <- nrow(cz_df)
touchgrid = data.frame(matrix(NA, nrow = len, ncol = len))
colnames(touchgrid) <- cz_df$leaid
rownames(touchgrid) <- cz_df$leaid
distgrid = data.frame(matrix(NA, nrow = len, ncol = len))
colnames(distgrid) <- cz_df$leaid
rownames(distgrid) <- cz_df$leaid
for(i in 1:len){
sf_i <- cz_df[i,]
sf_i_cent <- st_centroid(sf_i)
print(paste0("Starting i: ",i))
for(j in 1:len){
if (i<j){
sf_j <- cz_df[j,]
touch <- st_touches(sf_i,sf_j,sparse = FALSE)
touchgrid[i,j] <- touch[1]
touchgrid[j,i] <- touch[1]
dist <- st_distance(sf_i_cent,st_centroid(sf_j))
distgrid[i,j] <- dist[1]
distgrid[j,i] <- dist[1]
}
}
}
write.csv(touchgrid,paste0(INTDATA,'/nces/school_touching_distance/school_touching_',c,".csv"))
write.csv(distgrid,paste0(INTDATA,'/nces/school_touching_distance/school_centroid_dist_',c,".csv"))
}
df <- districts %>%
mutate(leaid = as.numeric(GEOID)) %>%
left_join(dist_cz_xwalk, by = 'leaid') %>%
inner_join(sample_czs, by = 'cz') %>%
st_make_valid()
for(c in unique(df$cz)){
print(paste0("Starting cz: ",c))
cz_df <- df %>% filter(cz == c)
len <- nrow(cz_df)
touchgrid = data.frame(matrix(NA, nrow = len, ncol = len))
colnames(touchgrid) <- cz_df$leaid
rownames(touchgrid) <- cz_df$leaid
distgrid = data.frame(matrix(NA, nrow = len, ncol = len))
colnames(distgrid) <- cz_df$leaid
rownames(distgrid) <- cz_df$leaid
for(i in 1:len){
sf_i <- cz_df[i,]
sf_i_cent <- st_centroid(sf_i)
print(paste0("Starting i: ",i))
for(j in 1:len){
if (i<j){
sf_j <- cz_df[j,]
touch <- st_touches(sf_i,sf_j,sparse = FALSE)
touchgrid[i,j] <- touch[1]
touchgrid[j,i] <- touch[1]
dist <- st_distance(sf_i_cent,st_centroid(sf_j))
distgrid[i,j] <- dist[1]
distgrid[j,i] <- dist[1]
}
}
}
write.csv(touchgrid,paste0(INTDATA,'/nces/school_touching_distance/school_touching_',c,".csv"))
write.csv(distgrid,paste0(INTDATA,'/nces/school_touching_distance/school_centroid_dist_',c,".csv"))
}
check <- df %>%
st_drop_geometry()
View(check)
table(check$FUNCSTAT)
for(c in unique(df$cz)){
print(paste0("Starting cz: ",c))
cz_df <- df %>% filter(cz == c)
len <- nrow(cz_df)
touchgrid = data.frame(matrix(NA, nrow = len, ncol = len))
colnames(touchgrid) <- cz_df$leaid
rownames(touchgrid) <- cz_df$leaid
distgrid = data.frame(matrix(NA, nrow = len, ncol = len))
colnames(distgrid) <- cz_df$leaid
rownames(distgrid) <- cz_df$leaid
for(i in 1:len){
sf_i <- cz_df[i,]
sf_i_cent <- st_centroid(sf_i)
print(paste0("Starting i: ",i))
for(j in 1:len){
if (i<j){
sf_j <- cz_df[j,]
touch <- st_touches(sf_i,sf_j,sparse = FALSE)
touchgrid[i,j] <- touch[1]
touchgrid[j,i] <- touch[1]
dist <- st_distance(sf_i_cent,st_centroid(sf_j))
distgrid[i,j] <- dist[1]
distgrid[j,i] <- dist[1]
}
}
}
write.csv(touchgrid,paste0(INTDATA,'/nces/school_touching_distance/school_touching_',c,".csv"))
write.csv(distgrid,paste0(INTDATA,'/nces/school_touching_distance/school_centroid_dist_',c,".csv"))
}
